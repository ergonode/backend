services:
    _defaults:
        autowire: true
        autoconfigure: true
        public: false

    Ergonode\Api\Application\:
        resource: '../../Application/*'

    Ergonode\Api\Infrastructure\:
        resource: '../../Infrastructure/*'

    Ergonode\Api\Application\EventListener\RequestBodyListener:
        tags:
            - { name: 'kernel.event_listener', event: 'kernel.request', priority: 1024 }

    Ergonode\Api\Application\EventListener\ResponseFormatterListener:
        tags:
            - { name: 'kernel.event_listener', event: 'kernel.response', priority: 128 }

    Ergonode\Api\Application\EventListener\ExceptionListener:
        tags:
            - { name: 'kernel.event_listener', event: 'kernel.exception', priority: -127 }

    Ergonode\Api\Application\HttpKernel\Controller\DTOInputValueResolver:
        arguments:
            $formatsMap:
                # TODO consider using framework.request.format instead to be more consistent across project
                application/json: json

    Ergonode\Api\Application\Mapper\ExceptionMapper:
        arguments:
            $map: '%ergonode_api.exceptions%'

    Ergonode\Api\Application\Mapper\ExceptionMapperInterface: '@Ergonode\Api\Application\Mapper\ExceptionMapper'

    Ergonode\Api\Infrastructure\Normalizer\ExceptionDebugNormalizer:
        decorates: 'Ergonode\Api\Infrastructure\Normalizer\ExceptionNormalizer'
        arguments:
            $debugMode: '%kernel.debug%'

    Ergonode\Api\Infrastructure\Normalizer\ExceptionNormalizerInterface: '@Ergonode\Api\Infrastructure\Normalizer\ExceptionNormalizer'
