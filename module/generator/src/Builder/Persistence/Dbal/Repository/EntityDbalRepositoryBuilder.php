<?php

/**
 * Copyright Â© Bold Brand Commerce Sp. z o.o. All rights reserved.
 * See LICENSE.txt for license details.
 */

declare(strict_types = 1);

namespace Ergonode\Generator\Builder\Persistence\Dbal\Repository;

use Ergonode\Generator\Builder\BuilderInterface;
use Ergonode\Generator\Builder\FileBuilder;
use Nette\PhpGenerator\ClassType;
use Nette\PhpGenerator\PhpFile;

/**
 */
class EntityDbalRepositoryBuilder implements BuilderInterface
{
    /**
     * @var FileBuilder
     */
    private $builder;

    /**
     * @param FileBuilder $builder
     */
    public function __construct(FileBuilder $builder)
    {
        $this->builder = $builder;
    }

    /**
     * @param string $module
     * @param string $entity
     *
     * @return PhpFile
     */
    public function build(string $module, string $entity): PhpFile
    {
        $file = $this->builder->build();
        $className = sprintf('%sRepository', $entity);
        $entityClass = sprintf('Ergonode\%s\Domain\Entity\%s', ucfirst($module), $entity);
        $entityIdClass = sprintf('Ergonode\%s\Domain\Entity\%sId', ucfirst($module), $entity);
        $repositoryInterface = sprintf('Ergonode\%s\Domain\Repository\%sRepositoryInterface', ucfirst($module), $entity);
        $namespace = sprintf('Ergonode\%s\Persistence\Dbal\Repository', ucfirst($module));

        $phpNamespace = $file->addNamespace($namespace);
        $phpNamespace->addUse($entityClass);
        $phpNamespace->addUse($entityIdClass);
        $phpNamespace->addUse($repositoryInterface);

        $phpClass = $phpNamespace->addClass($className);
        $phpClass->addImplement($repositoryInterface);
        $phpClass->addComment('Autogenerated repository class');
        $phpClass->addMethod('load')
            ->setReturnType($entityClass)
            ->setReturnNullable()
            ->setVisibility(ClassType::VISIBILITY_PUBLIC)
            ->addComment('{@inheritDoc}')
            ->addParameter('id')
            ->setTypeHint($entityIdClass);
        $phpClass->addMethod('save')
            ->setReturnType('void')
            ->setVisibility(ClassType::VISIBILITY_PUBLIC)
            ->addComment('{@inheritDoc}')
            ->addParameter('object')
            ->setTypeHint($entityClass);
        $phpClass->addMethod('exists')
            ->setReturnType('bool')
            ->setVisibility(ClassType::VISIBILITY_PUBLIC)
            ->addComment('{@inheritDoc}')
            ->addParameter('id')
            ->setTypeHint($entityIdClass);

        return $file;
    }
}
