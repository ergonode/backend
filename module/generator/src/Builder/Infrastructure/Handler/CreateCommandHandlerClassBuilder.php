<?php

/**
 * Copyright Â© Bold Brand Commerce Sp. z o.o. All rights reserved.
 * See LICENSE.txt for license details.
 */

declare(strict_types = 1);

namespace Ergonode\Generator\Builder\Infrastructure\Handler;

use Ergonode\Generator\Builder\BuilderInterface;
use Ergonode\Generator\Builder\FileBuilder;
use Ergonode\Generator\Builder\MethodBuilder;
use Ergonode\Generator\Builder\PropertyBuilder;
use Nette\PhpGenerator\Method;
use Nette\PhpGenerator\PhpFile;

/**
 */
class CreateCommandHandlerClassBuilder implements BuilderInterface
{
    /**
     * @var FileBuilder
     */
    private FileBuilder $builder;

    /**
     * @var MethodBuilder
     */
    private MethodBuilder $methodBuilder;

    /**
     * @var PropertyBuilder
     */
    private PropertyBuilder $propertyBuilder;

    /**
     * @param FileBuilder     $builder
     * @param MethodBuilder   $methodBuilder
     * @param PropertyBuilder $propertyBuilder
     */
    public function __construct(FileBuilder $builder, MethodBuilder $methodBuilder, PropertyBuilder $propertyBuilder)
    {
        $this->builder = $builder;
        $this->methodBuilder = $methodBuilder;
        $this->propertyBuilder = $propertyBuilder;
    }

    /**
     * @param string $module
     * @param string $entity
     * @param array  $properties
     *
     * @return PhpFile
     */
    public function build(string $module, string $entity, array $properties = []): PhpFile
    {
        $file = $this->builder->build();
        $className = sprintf('Create%sCommandHandler', $entity);
        $repositoryInterface =
            sprintf('Ergonode\%s\Domain\Repository\%sRepositoryInterface', ucfirst($module), $entity);
        $factoryInterface = sprintf('Ergonode\%s\Domain\Factory\%sFactoryInterface', ucfirst($module), $entity);

        $namespace = sprintf('Ergonode\%s\Infrastructure\Handler', ucfirst($module));

        $properties = [
            'repository' => $repositoryInterface,
            'factory' => $factoryInterface,
        ];

        $phpNamespace = $file->addNamespace($namespace);
        $class = $phpNamespace->addClass($className);
        $class->addComment('Autogenerated class');

        foreach ($properties as $name => $type) {
            $class->addMember($this->propertyBuilder->build($name, $type));
        }
        $class->addMember($this->buildConstructor($module, $entity, $properties));
        $class->addMember($this->buildInvokeMethod($module, $entity, $properties));

        return $file;
    }

    /**
     * @param string $module
     * @param string $entity
     * @param array  $properties
     *
     * @return Method
     */
    private function buildConstructor(string $module, string $entity, array $properties = []): Method
    {
        $repositoryInterface =
            sprintf('Ergonode\%s\Domain\Repository\%sRepositoryInterface', ucfirst($module), $entity);
        $factoryInterface =
            sprintf('Ergonode\%s\Domain\Factory\%sFactoryInterface', ucfirst($module), $entity);

        $method = $this
            ->methodBuilder
            ->build('__construct', ['repository' => $repositoryInterface, 'factory' => $factoryInterface]);
        $method->addBody('$this->repository = $repository;');
        $method->addBody('$this->factory = $factory;');

        return $method;
    }

    /**
     * @param string $module
     * @param string $entity
     * @param array  $parameters
     *
     * @return Method
     */
    private function buildInvokeMethod(string $module, string $entity, array $parameters = []): Method
    {
        $commandClass = sprintf('Ergonode\%s\Domain\Command\Create%sCommand', ucfirst($module), $entity);

        $method = $this->methodBuilder->build('__invoke', ['command' => $commandClass], 'void');
        $method->addBody('$entity = $this->factory->create($command->getId());');
        $method->addBody('$this->repository->save($entity);');

        return $method;
    }
}
