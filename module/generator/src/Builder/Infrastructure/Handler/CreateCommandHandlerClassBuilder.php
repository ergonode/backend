<?php

/**
 * Copyright Â© Bold Brand Commerce Sp. z o.o. All rights reserved.
 * See LICENSE.txt for license details.
 */

declare(strict_types=1);

namespace Ergonode\Generator\Builder\Infrastructure\Handler;

use Ergonode\Generator\Builder\BuilderInterface;
use Ergonode\Generator\Builder\FileBuilder;
use Ergonode\Generator\Builder\MethodBuilder;
use Ergonode\Generator\Builder\PropertyBuilder;
use Nette\PhpGenerator\PhpFile;
use Webmozart\Assert\Assert;

/**
 */
class CreateCommandHandlerClassBuilder implements BuilderInterface
{
    /**
     * @var FileBuilder
     */
    private $builder;

    /**
     * @var MethodBuilder
     */
    private $methodBuilder;

    /**
     * @var PropertyBuilder
     */
    private $propertyBuilder;

    /**
     * @param FileBuilder     $builder
     * @param MethodBuilder   $methodBuilder
     * @param PropertyBuilder $propertyBuilder
     */
    public function __construct(FileBuilder $builder, MethodBuilder $methodBuilder, PropertyBuilder $propertyBuilder)
    {
        $this->builder = $builder;
        $this->methodBuilder = $methodBuilder;
        $this->propertyBuilder = $propertyBuilder;
    }


    /**
     * @param string $module
     * @param string $entity
     *
     * @return PhpFile
     */
    public function build(string $module, string $entity): PhpFile
    {
        $file = $this->builder->build();
        $className = sprintf('Create%sCommandHandler', $entity);

        $namespace = sprintf('Ergonode\%s\Infrastructure\Handler', ucfirst($module));
        $entityIdClass = sprintf('Ergonode\%s\Domain\Entity\%sId', ucfirst($module), $entity);
        $entityClass = sprintf('Ergonode\%s\Domain\Entity\%s', ucfirst($module), $entity);
        $commandClass = sprintf('Ergonode\%s\Domain\Command\Create%sCommand', ucfirst($module), $entity);
        $repositoryInterface = sprintf('Ergonode\%s\Domain\Repository\%sRepositoryInterface', ucfirst($module), $entity);
        $factoryInterface = sprintf('Ergonode\%s\Domain\Factory\%sFactoryInterface', ucfirst($module), $entity);

        $phpNamespace = $file->addNamespace($namespace);
        $phpNamespace->addUse($entityIdClass);
        $phpNamespace->addUse($entityClass);
        $phpNamespace->addUse($commandClass);
        $phpNamespace->addUse($repositoryInterface);
        $phpNamespace->addUse($factoryInterface);
        $phpNamespace->addUse(Assert::class);

        $class = $phpNamespace->addClass($className);
        $class->addComment('Autogenerated class');

        $property = $this->propertyBuilder->build('repository', $repositoryInterface);
        $class->addMember($property);
        $property = $this->propertyBuilder->build('factory', $factoryInterface);
        $class->addMember($property);

        $method = $this->methodBuilder->build('__invoke', ['command' => $commandClass]);
        $method->addBody('$entity = $this->factory->create($command->getId());');
        $method->addBody('$this->repository->save($entity);');

        $class->addMember($method);

        return $file;
    }
}
