<?php

/**
 * Copyright Â© Bold Brand Commerce Sp. z o.o. All rights reserved.
 * See LICENSE.txt for license details.
 */

declare(strict_types = 1);

namespace Ergonode\Generator\Builder\Infrastructure\JMS\Serializer\Handler;

use Ergonode\Generator\Builder\BuilderInterface;
use Ergonode\Generator\Builder\FileBuilder;
use JMS\Serializer\Context;
use JMS\Serializer\GraphNavigatorInterface;
use JMS\Serializer\Handler\SubscribingHandlerInterface;
use JMS\Serializer\Visitor\DeserializationVisitorInterface;
use JMS\Serializer\Visitor\SerializationVisitorInterface;
use Nette\PhpGenerator\PhpFile;

/**
 */
class EntityIdHandlerClassBuilder implements BuilderInterface
{
    /**
     * @var FileBuilder
     */
    private $builder;

    /**
     * @param FileBuilder $builder
     */
    public function __construct(FileBuilder $builder)
    {
        $this->builder = $builder;
    }

    /**
     * @param string $module
     * @param string $entity
     *
     * @return PhpFile
     */
    public function build(string $module, string $entity): PhpFile
    {
        $file = $this->builder->build();
        $className = sprintf('%sIdHandler', $entity);

        $namespace = sprintf('Ergonode\%s\Infrastructure\JMS\Serializer\Handler', ucfirst($module));
        $entityIdClass = sprintf('Ergonode\%s\Domain\Entity\%sId', ucfirst($module), $entity);

        $phpNamespace = $file->addNamespace($namespace);
        $phpNamespace->addUse($entityIdClass);
        $phpNamespace->addUse(SubscribingHandlerInterface::class);
        $phpNamespace->addUse(GraphNavigatorInterface::class);
        $phpNamespace->addUse(SerializationVisitorInterface::class);
        $phpNamespace->addUse(DeserializationVisitorInterface::class);
        $phpNamespace->addUse(Context::class);


        $class = $phpNamespace->addClass($className);
        $class->addImplement(SubscribingHandlerInterface::class);
        $class->addComment('Autogenerated class');

        $class->addMethod('getSubscribingMethods')
            ->setReturnType('array')
            ->setStatic()
            ->setComment('@return array')
            ->addBody(sprintf('$methods = [];
$formats = [\'json\', \'xml\', \'yml\'];

foreach ($formats as $format) {
    $methods[] = [
        \'direction\' => GraphNavigatorInterface::DIRECTION_SERIALIZATION,
        \'type\' => %sId::class,
        \'format\' => $format,
        \'method\' => \'serialize\',
    ];

    $methods[] = [
        \'direction\' => GraphNavigatorInterface::DIRECTION_DESERIALIZATION,
        \'type\' => %sId::class,
        \'format\' => $format,
        \'method\' => \'deserialize\',
    ];
}

return $methods;', $entity, $entity));

        $method = $class->addMethod('serialize')
            ->setReturnType('string')
            ->setStatic()
            ->addComment('@param SerializationVisitorInterface $visitor')
            ->addComment(sprintf('@param %sId $id', $entity))
            ->addComment('@param array $type')
            ->addComment('@param Context $context')
            ->addComment('')
            ->addComment('@return string')
            ->addBody('return $id->getValue();');
        $method->addParameter('visitor')
            ->setTypeHint(SerializationVisitorInterface::class);
        $method->addParameter('id')
            ->setTypeHint($entityIdClass);
        $method->addParameter('type')
            ->setTypeHint('array');
        $method->addParameter('context')
            ->setTypeHint(Context::class);

        $method = $class->addMethod('deserialize')
            ->setReturnType($entityIdClass)
            ->setStatic()
            ->addComment('@param DeserializationVisitorInterface $visitor')
            ->addComment('@param mixed $data')
            ->addComment('@param array $type')
            ->addComment('@param Context $context')
            ->addComment('')
            ->addComment(sprintf('@return  %sId', $entity))
            ->addBody(sprintf('return new %sId($data);', $entity));

        $method->addParameter('visitor')
            ->setTypeHint(DeserializationVisitorInterface::class);
        $method->addParameter('data');
        $method->addParameter('type')
            ->setTypeHint('array');
        $method->addParameter('context')
            ->setTypeHint(Context::class);

        return $file;
    }
}
