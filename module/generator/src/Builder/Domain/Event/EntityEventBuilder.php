<?php

/**
 * Copyright Â© Bold Brand Commerce Sp. z o.o. All rights reserved.
 * See LICENSE.txt for license details.
 */

declare(strict_types = 1);

namespace Ergonode\Generator\Builder\Domain\Event;

use Ergonode\Core\Domain\Entity\AbstractId;
use Ergonode\EventSourcing\Domain\AbstractAggregateRoot;
use Ergonode\EventSourcing\Infrastructure\DomainEventInterface;
use Ergonode\Generator\Builder\BuilderInterface;
use Ergonode\Generator\Builder\FileBuilder;
use Nette\PhpGenerator\ClassType;
use Nette\PhpGenerator\PhpFile;

/**
 */
class EntityEventBuilder implements BuilderInterface
{
    /**
     * @var FileBuilder
     */
    private $builder;

    /**
     * @param FileBuilder $builder
     */
    public function __construct(FileBuilder $builder)
    {
        $this->builder = $builder;
    }

    /**
     * @param string      $module
     * @param string|null $className
     * @param array       $properties
     *
     * @return PhpFile
     */
    public function build(string $module, string $className = null, array $properties = []): PhpFile
    {
        $file = $this->builder->build();

        $namespace = sprintf('Ergonode\%s\Domain\Event', ucfirst($module));

        $phpNamespace = $file->addNamespace($namespace);

        $phpNamespace->addUse(AbstractId::class);
        $phpNamespace->addUse('\JMS\Serializer\Annotation', 'JMS');

        $phpClass = $phpNamespace->addClass($className);
        $phpNamespace->addUse(DomainEventInterface::class);
        $phpClass->addComment('Autogenerated class');

        foreach ($properties as $name => $type) {

            if($type !== 'string') {
                $phpNamespace->addUse($type);
            }

            $phpClass->addProperty($name)
                ->setVisibility(ClassType::VISIBILITY_PRIVATE)
                ->addComment(' ')
                ->addComment(sprintf('@var %s $%s', $type, $name));

            $phpClass->addMethod(sprintf('get%s', ucfirst($name)))
                ->setReturnType($type)
                ->addComment(' ')
                ->addComment(sprintf('@return %s', $type))
                ->addBody(sprintf('return $this->%s;', $name));
        }

        return $file;
    }
}
