<?php

/**
 * Copyright Â© Bold Brand Commerce Sp. z o.o. All rights reserved.
 * See LICENSE.txt for license details.
 */

declare(strict_types = 1);

namespace Ergonode\Generator\Builder\Domain\Entity;

use Ergonode\EventSourcing\Domain\AbstractAggregateRoot;
use Ergonode\Generator\Builder\BuilderInterface;
use Ergonode\Generator\Builder\FileBuilder;
use Ergonode\Generator\Builder\MethodBuilder;
use Ergonode\Generator\Builder\PropertyBuilder;
use Ergonode\SharedKernel\Domain\AggregateId;
use Nette\PhpGenerator\ClassType;
use Nette\PhpGenerator\Method;
use Nette\PhpGenerator\PhpFile;

/**
 */
class EntityClassBuilder implements BuilderInterface
{
    /**
     * @var FileBuilder
     */
    private FileBuilder $builder;

    /**
     * @var PropertyBuilder
     */
    private PropertyBuilder $propertyBuilder;

    /**
     * @var MethodBuilder
     */
    private MethodBuilder $methodBuilder;

    /**
     * @param FileBuilder     $builder
     * @param PropertyBuilder $propertyBuilder
     * @param MethodBuilder   $methodBuilder
     */
    public function __construct(FileBuilder $builder, PropertyBuilder $propertyBuilder, MethodBuilder $methodBuilder)
    {
        $this->builder = $builder;
        $this->propertyBuilder = $propertyBuilder;
        $this->methodBuilder = $methodBuilder;
    }

    /**
     * @param string $module
     * @param string $entity
     * @param array  $properties
     *
     * @return PhpFile
     */
    public function build(string $module, string $entity, array $properties = []): PhpFile
    {
        $file = $this->builder->build();
        $className = $entity;

        $namespace = sprintf('Ergonode\%s\Domain\Entity', ucfirst($module));

        $phpNamespace = $file->addNamespace($namespace);

        $phpClass = $phpNamespace->addClass($className);
        $phpClass->setExtends(AbstractAggregateRoot::class);
        $phpClass->addComment('Autogenerated class');

        $properties = array_merge(['id' => AggregateId::class], $properties);
        $phpClass->addMember($this->buildConstructor($entity, $properties));

        foreach ($properties as $name => $type) {
            $phpClass->addMember($this->propertyBuilder->build($name, $type));
            $phpClass->addMember($this->buildGetter($name, $type));
        }

        $phpClass->addMember($this->buildCreateEvent($module, $entity, $properties));

        return $file;
    }

    /**
     * @param string $entity
     * @param array  $properties
     *
     * @return Method
     */
    private function buildConstructor(string $entity, array $properties = []): Method
    {
        $method = $this->methodBuilder->build('__construct', $properties);
        $properties = implode(', ', preg_filter('/^/', '$', array_keys($properties)));
        $method->addBody(
            sprintf(
                '$this->apply(new %sCreatedEvent(%s));',
                ucfirst($entity),
                $properties
            )
        );

        return $method;
    }

    /**
     * @param string $module
     * @param string $entity
     * @param array  $properties
     *
     * @return Method
     */
    private function buildCreateEvent(string $module, string $entity, array $properties = []): Method
    {
        $eventClass = sprintf('Ergonode\%s\Domain\Event\%sCreatedEvent', ucfirst($module), ucfirst($entity));
        $method = $this
            ->methodBuilder
            ->build(
                sprintf('apply%sCreatedEvent', ucfirst($entity)),
                ['event' => $eventClass],
                'void'
            );
        $method->setVisibility(ClassType::VISIBILITY_PROTECTED);
        foreach ($properties as $name => $property) {
            $method->addBody(sprintf('$this->%s = $event->get%s();', $name, ucfirst($name)));
        }

        return $method;
    }

    /**
     * @param string $name
     * @param string $returnType
     *
     * @return Method
     */
    private function buildGetter(string $name, string $returnType): Method
    {
        $method = $this->methodBuilder->build(sprintf('get%s', ucfirst($name)), [], $returnType);
        $method->addBody(sprintf('return $this->%s;', $name));

        return $method;
    }
}
