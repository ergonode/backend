<?php

/**
 * Copyright Â© Bold Brand Commerce Sp. z o.o. All rights reserved.
 * See LICENSE.txt for license details.
 */

declare(strict_types = 1);

namespace Ergonode\Generator\Builder\Domain\Command;

use Ergonode\Core\Domain\Entity\AbstractId;
use Ergonode\Core\Domain\ValueObject\TranslatableString;
use Ergonode\Generator\Builder\BuilderInterface;
use Ergonode\Generator\Builder\FileBuilder;
use Nette\PhpGenerator\PhpFile;

/**
 */
class CreateCommandClassBuilder implements BuilderInterface
{
    /**
     * @var FileBuilder
     */
    private $builder;

    /**
     * @param FileBuilder $builder
     */
    public function __construct(FileBuilder $builder)
    {
        $this->builder = $builder;
    }

    /**
     * @param string $module
     * @param string $entity
     *
     * @return PhpFile
     */
    public function build(string $module, string $entity): PhpFile
    {
        $file = $this->builder->build();
        $namespace = sprintf('Ergonode\%s\Domain\Command', ucfirst($module));
        $className = sprintf('Create%sCommand',$entity);
        $entityIdClass = sprintf('Ergonode\%s\Domain\Entity\%sId', ucfirst($module), $entity);

        $phpNamespace = $file->addNamespace($namespace);
        $phpNamespace->addUse($entityIdClass);
        $phpNamespace->addUse(TranslatableString::class);
        $phpNamespace->addUse('\JMS\Serializer\Annotation', 'JMS');

        $phpClass = $phpNamespace->addClass($className);
        $phpClass->addComment('Autogenerated class');
        $phpClass->addProperty('id')
            ->addComment(sprintf('@var %sId', $entity))
            ->addComment('')
            ->addComment(sprintf('@JMS\Type("\Ergonode\%s\Domain\Entity\%sId")', $module, $entity));
        $phpClass->addProperty('name')
            ->addComment('@var TranslatableString')
            ->addComment('')
            ->addComment(sprintf('@JMS\Type("%s")', TranslatableString::class));

        $phpClass->addProperty('description')
            ->addComment('@var TranslatableString')
            ->addComment('')
            ->addComment(sprintf('@JMS\Type("%s")', TranslatableString::class));

        $method = $phpClass->addMethod('__construct')
            ->addComment('@param $name TranslatableString')
            ->addComment('@param $description TranslatableString')
            ->addBody(sprintf('$this->id = %sId::generate();', $entity))
            ->addBody('$this->name = $name;')
            ->addBody('$this->description = $description;');

        $method->addParameter('name')
            ->setTypeHint(TranslatableString::class);
        $method->addParameter('description')
            ->setTypeHint(TranslatableString::class);


        $phpClass->addMethod('getId')
            ->setReturnType($entityIdClass)
            ->addComment(' ')
            ->addComment(sprintf('@return %sId', $entity))
            ->addBody('return $this->id;');

        $phpClass->addMethod('getName')
            ->setReturnType(TranslatableString::class)
            ->addComment(' ')
            ->addComment('@return TranslatableString')
            ->addBody('return $this->name;');

        $phpClass->addMethod('getDescription')
            ->setReturnType(TranslatableString::class)
            ->addComment(' ')
            ->addComment('@return TranslatableString')
            ->addBody('return $this->description;');

        return $file;
    }
}
